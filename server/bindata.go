// Code generated by go-bindata.
// sources:
// _static/diff.html
// _static/edit.html
// _static/fav.ico
// _static/history.html
// _static/listdir.html
// _static/view.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __staticDiffHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\x3d\x6f\xdc\x30\x0c\xdd\xfb\x2b\x08\x75\x4b\xeb\xd3\xd4\x22\x48\xec\x5b\x8a\x7e\xa1\x43\x87\x16\xe8\x2c\x5b\x74\x4c\x9c\x2d\x19\x14\xef\xea\xcb\xc1\xff\xbd\x92\xee\x23\x4e\x90\x14\x88\x17\x53\x7a\x7c\x8f\xd4\x93\x58\x76\x32\xf4\xeb\x37\x00\x65\x87\xc6\xe6\x40\x48\x7a\x5c\x1f\x0e\xab\xdf\x29\x98\xe7\x52\x1f\x77\x12\x36\xa0\x18\x68\x3a\xc3\x01\xa5\x52\x5b\x69\x8b\x6b\x95\x81\x9e\xdc\x06\x18\xfb\x4a\x05\xd9\xf7\x18\x3a\x44\x51\xd0\x31\xb6\x95\x8a\x52\xdf\x7c\x90\x79\xd6\xd2\xe1\x80\x41\x37\xc8\xdb\x1e\x8d\x5b\x0d\xe4\x56\x4d\x08\x0a\xf4\xeb\x45\x6a\xef\x25\x08\x9b\xb1\x60\x0c\xa3\x77\x81\x76\xf8\x54\x30\xcb\x80\xec\x47\xac\x94\xe0\x24\x3a\x63\x03\x5a\x32\xb1\x46\xc3\x88\x2e\xb7\x0f\xf0\xd6\x52\xdb\xc2\x21\xc7\xe9\x1b\x0c\xdf\x91\xbb\x81\x0f\x1f\xc7\x09\xcc\x56\xfc\xed\x05\x2a\xfe\x62\xbd\x21\x29\x6a\x3f\x15\x81\xee\xc9\xdd\xdd\x40\xed\xd9\x22\xa7\xad\x5b\xd0\x57\xf0\xcb\xb4\x86\xe9\x3d\xf8\xd8\x2b\xc3\x1f\xac\x7f\x90\xc0\x95\x7e\x90\x18\xfc\xfd\x8b\xfc\xf8\x45\x89\x2f\x14\x8f\xed\xa7\xb3\xc6\x57\x6c\x36\x7e\x29\xf1\x1f\x36\x9c\x24\x7e\x8e\xc8\x46\x7f\xff\x0c\xd7\xef\xce\xcc\x39\xb9\xa2\xb3\x2d\xd9\x20\x7d\xb9\xf5\xda\xdb\xfd\xd1\x8a\xd2\xd2\x0e\x9a\xde\x84\x50\x29\x67\x76\xb5\x61\x38\xfe\x0a\x8b\xad\xd9\xf6\x72\x5e\xb6\x34\xa1\x2d\xc4\x8f\x27\x0f\x1f\x53\x1b\xef\xc4\x90\x43\xbe\xa0\xcf\x49\x17\xa9\x81\x47\x39\xa7\x2c\xb2\x95\x4a\x58\x7c\x13\xa8\x9e\x70\x6a\x36\xce\xaa\x35\x3c\xbc\xd1\x78\x92\x48\x5a\x14\x5a\x2e\x17\x8b\x65\x78\xae\x92\x6e\x5e\xbd\xd4\x75\xca\x5a\x97\x23\xe7\x81\xf8\x14\x41\x74\x92\x46\x22\xed\x3c\xa7\x5b\xea\xa3\x91\xd1\xd9\x34\x58\xff\x02\x00\x00\xff\xff\xc2\x61\x81\xd3\x5f\x03\x00\x00")

func _staticDiffHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticDiffHtml,
		"_static/diff.html",
	)
}

func _staticDiffHtml() (*asset, error) {
	bytes, err := _staticDiffHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/diff.html", size: 863, mode: os.FileMode(420), modTime: time.Unix(1440120969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticEditHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xe0\x18\x0c\xd8\x80\xc8\x4a\x80\xb5\x2b\x52\xc9\xdb\x90\x75\x58\x9f\x1a\xa0\x69\xb7\x3d\x52\xe2\xd9\x62\x43\x91\x1a\x79\x72\x9c\x06\xfe\xee\x3b\x92\x92\x2d\x3b\x76\x80\xee\xa5\x02\x12\x4b\x77\xbc\x7f\xbf\xfb\xc3\x2b\xbe\xfb\xfd\xfd\xf5\xed\x3f\x37\x6f\x59\x83\xad\x9e\xbf\x28\xc2\x0f\xd3\xc2\x2c\x4b\x0e\x86\x07\x02\x08\x39\x7f\xc1\x58\xd1\x02\x0a\x56\x37\xc2\x79\xc0\x92\x7f\xbc\xfd\x23\x7b\xcd\x77\x8c\x06\xb1\xcb\xe0\xdf\x5e\xad\x4a\xfe\x77\xf6\xf1\xb7\xec\xda\xb6\x9d\x40\x55\x69\xe0\xac\xb6\x06\xc1\x90\xd4\xbb\xb7\x25\xc8\x25\x9c\xd7\x8d\xb3\x2d\x94\x97\x49\x01\x2a\xd4\x30\x7f\x7c\x9c\xdd\x86\x97\xcd\xa6\xc8\x13\x25\xf0\xb4\x32\x77\xcc\x81\x2e\xb9\xc7\x07\x0d\xbe\x01\x40\xce\x1a\x07\x8b\x92\x93\xc4\x9f\xd6\xe3\x66\x93\x63\x03\x2d\xf8\xbc\x06\xd7\x6b\x10\x66\xd6\x2a\x33\xab\xbd\xe7\x2c\xff\x0a\x25\x1e\x9d\xe8\xa4\xbd\x7f\x22\x1e\x85\x18\x3e\x74\x50\x72\x84\x35\xe6\x91\xd7\x82\x54\x82\x34\xd6\x0e\x22\x52\x8c\x9e\x80\xde\x39\xab\xac\x7c\x60\x8f\x91\x40\x24\x50\xcb\x06\xaf\xd8\xe5\xc5\xc5\xf7\x6f\x06\x5a\x2b\xdc\x52\x99\x2b\x76\x31\x12\x3a\x21\xa5\x32\xcb\x2d\x65\x13\xff\xef\xe9\xd9\x1d\xe9\xd6\xa3\xd8\x82\x70\xcd\xbc\xfa\x02\xa4\xfe\xe5\x8e\x4c\xe1\x42\xf6\xd4\x6e\x52\xba\x6e\xbb\x73\x16\xa2\x10\x0e\xc4\x56\xbb\x54\xbe\xd3\xe2\xe1\x8a\x55\xda\xd6\x77\xd3\xf3\xe1\x99\x19\xb1\xaa\x84\x7b\xdc\x12\xc2\xf3\x25\x53\x46\xc2\x3a\x58\x78\xb3\x65\x24\x99\x33\x82\x06\xad\xdb\x6a\x7f\x1a\xaf\xf5\x0a\x95\x25\x92\xa8\xbc\xd5\x3d\xc2\xc8\x41\xdb\x5d\xb1\x97\x97\xbb\x60\x2a\x8b\x68\xdb\x89\xac\x86\x05\x4e\x3e\x5d\x0a\x73\x0f\xb8\xb3\xce\xc1\x4a\xc1\x7d\x86\x76\xb9\xa4\xd4\xed\xfb\x91\xb9\x11\x99\xd1\x4a\x92\x9a\x39\xa0\x80\x5c\x46\xc8\x2c\x01\x0f\x64\xa2\x5f\xaf\x0e\x24\x7e\x8d\x35\xc0\x7e\x68\xc5\x3a\xbb\x57\x12\x9b\x2b\xf6\xf3\xab\xd7\xdd\xfa\xc7\x51\x78\x00\x6e\xfc\xcd\x2a\x34\x3b\x10\x8f\x61\x1e\x9e\x41\xd3\xb4\x60\x36\x53\x37\x4f\xeb\x3c\x88\xef\xa7\xa9\xb7\x45\x1e\xcb\x98\x3a\x3a\x4f\x2d\x5d\x84\xf2\x4a\x65\x5b\x48\xb5\x62\xb5\x16\xde\x97\x7c\xd0\x3e\x28\x97\xb0\x10\xbd\xc6\xf1\x73\xa1\xd6\x20\x03\x16\x43\xbd\x1f\x0a\x87\x46\x17\x54\x7d\x74\x52\xf7\x4a\x4e\x4e\x1d\x37\x93\x05\x57\xc0\x1d\x9c\x8b\x67\xab\x9e\xf2\x6e\x86\xae\x4b\x1f\xfc\x40\x78\xc8\x6e\x6d\xb5\x16\x9d\x07\xc9\x99\x14\x28\x06\x72\x70\x26\xd1\x47\x72\x4c\x6b\xc9\xcf\x5a\xf2\x30\x23\x15\x9c\x09\xa7\x44\x06\xeb\x4e\x18\x59\xf2\x85\xd0\x74\xf6\xa9\x27\xd1\x1b\x4f\x67\x46\xeb\x8a\xa2\xcc\xc8\x3e\x9f\x13\xa6\x44\xff\x56\x22\x45\x9e\x60\x39\xc2\x79\x0a\x74\xe5\x28\x48\x3e\xff\x4b\xdd\xa9\x22\x27\xf6\x41\x66\x8e\x90\xf6\xd2\x9a\x90\x1c\xcb\x60\x8b\xec\x11\xd3\xbd\x9e\x58\x1e\x05\x26\xaf\xb1\x38\x4f\xc1\xac\xd5\x71\x46\x64\x8a\x61\x62\x9f\x71\xa6\x28\x5f\xfb\x3d\xce\xe7\xef\x8c\x47\x61\x90\xdd\x24\x7a\x91\x8b\x13\x46\xf2\x53\x56\x9e\x37\xbf\xb0\xae\xa5\xa1\x8f\x8d\x25\xe3\x37\xef\x3f\xdc\x52\xfd\xd4\x61\x88\x95\xfc\x97\x30\xef\x38\x45\xd8\x86\x5a\xa5\xb6\xe2\x0c\x4c\x9d\x4a\xb7\xa5\xf6\x51\x9d\x70\x98\x07\x05\x59\x28\x45\xce\x4e\x9b\x89\xa6\x94\xe9\x7a\x8c\x41\x7a\xb1\xfa\x24\x74\x4f\x35\x9c\xb4\x35\x4a\x4a\xba\x6d\xf6\x4c\xad\xc2\x81\x92\x0f\xb7\xd5\x33\x6a\x87\x96\x1a\xd2\x43\x73\x83\xd1\xdf\x61\x8b\x13\x69\x34\xe6\xfb\xaa\xa5\xb8\xe6\x1f\xc4\x0a\x4e\x17\xdb\x0e\xd7\x10\xe0\xd7\x60\x5e\xe4\xbd\x7e\xb6\x0e\x27\x9f\xdb\xd7\x69\x5d\xee\x0d\x6c\xce\xe2\x80\x2b\xf9\x38\x57\x8d\x35\x10\xba\x67\x14\xa4\x9b\x8f\xad\xc0\xf9\x98\x32\xba\xf6\x3f\xa5\xf7\xcd\x26\xd5\x53\xba\xb3\x78\xd8\x43\xae\xd3\xbe\x12\x36\x11\x12\x4a\x3b\x40\xed\x54\x87\xcc\xbb\x7a\xba\x32\x88\x1a\xc2\xdf\xec\xb3\xe7\xd3\xfd\xe0\xb3\x58\x89\x24\xc0\x77\x1b\x53\x8f\x8b\xb0\x31\x51\x37\x47\xce\x33\x5a\x83\x27\x71\x07\xf9\x5f\x6a\x29\x53\x71\xb0\xd3\x9c\x0f\x2b\xdd\x7f\x01\x00\x00\xff\xff\x81\xd6\xa8\xe2\xe2\x09\x00\x00")

func _staticEditHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticEditHtml,
		"_static/edit.html",
	)
}

func _staticEditHtml() (*asset, error) {
	bytes, err := _staticEditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/edit.html", size: 2530, mode: os.FileMode(420), modTime: time.Unix(1440121673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticFavIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x97\x4b\x48\x54\x51\x1c\xc6\x4f\x4d\x35\x59\xe0\x0c\x14\x2d\x02\x6b\x68\x11\xb5\xb2\xc0\x95\x20\x0a\xd1\x2e\x8a\x8c\x68\x21\x44\x0f\x28\x2a\x10\x82\xdc\xf5\x9a\x82\x56\x15\x44\xaf\x4d\xa4\x8b\x88\xd1\x88\x4c\x0b\x8a\x1e\x58\x10\x08\x11\x75\xdb\x15\x11\x4a\xef\x07\x25\xf4\x24\x26\x6f\xdf\x9f\xf9\x4f\x0c\x7f\xbf\xb9\x17\xf5\x8c\x5e\xf9\x31\x32\xe7\xe7\xf7\x1d\xef\x9c\x7b\xee\x1d\xe7\xa6\xe0\x27\x93\x91\xd7\x8c\xcb\xa5\x9d\x9b\xe7\x9c\x5b\x02\xf0\x96\x6b\x72\x85\xf7\xe5\x38\x88\xb1\x39\xb3\x0b\x44\x1d\x41\xb6\x76\x2f\xc8\x83\xe7\xe0\x05\xf8\x0e\x56\x12\xef\xba\x8e\x89\xf7\x11\x3c\x02\xa9\xe8\xf4\xf8\x03\x19\xdb\x41\x68\xd8\x5f\xa6\xdf\x7a\x0d\x1e\xfa\x1b\x48\x6e\x27\xf1\xda\x88\xb7\xc9\x43\x7f\x35\xf8\x62\x72\x9f\x10\x6f\x2d\xe9\x3f\x3d\xde\x7e\xcd\x7e\x6c\x72\x7f\x82\xb9\xc6\x59\xa8\xeb\xa4\xd4\xbb\xe9\xa9\xbf\x9d\xfc\x6f\xf5\xc6\x99\x06\x06\x8d\xf3\x0e\xcc\xf0\xd0\xbf\x87\xf4\x6f\x26\x5e\x17\xf1\x96\x8e\xb1\x73\x56\xf1\xfa\xc1\x6b\x33\xc9\x3d\xa9\x63\xb2\x3e\xd2\xfa\xfb\xd1\x72\xf3\x94\x2c\x25\xad\x7f\x53\x15\xd3\x7f\x4e\xd7\x9d\x7c\xd6\x9f\x48\xee\x1f\xbd\xce\x3f\x2b\x1f\xc0\x57\xe2\xfd\xd0\xb1\xa2\x37\x0c\x9e\x15\xe7\x1f\xd1\x7f\x89\x64\xf9\x62\x08\x5c\x88\xe9\xef\xac\x60\xbf\x9c\xcf\xf6\x98\x7e\xb6\x96\x26\xb2\xbf\x92\xe7\x5f\xee\x13\x23\xf6\x50\xd3\xbf\x02\x6c\x03\xbb\xc0\x3a\x70\x84\xe4\xf4\x83\x0d\x60\x67\x89\xd7\x4b\x3c\x59\xcb\xab\x34\xaf\x15\x6c\x04\x8d\x51\xfd\x64\x3e\xf3\xc1\x2f\x93\x7b\x97\x78\x6b\x48\xff\xee\xd1\x74\x45\xcc\x21\x30\xb9\x72\x3d\xa5\x8c\xb3\x8c\xf4\xf7\x7a\xea\x67\x6b\xa2\xd6\x38\xd3\xc1\x2b\xe3\x04\x9e\xfa\xd9\x3e\xdc\x42\xbc\x7b\xc6\x91\xfb\x52\xcd\x28\xbb\xe4\xb9\xe7\x0e\x78\x00\x6e\x83\x2b\xe0\x29\xe9\x7f\x09\xba\xd5\xb9\x05\x7a\xc0\x9b\x32\x6b\x55\x9e\x51\x1e\x82\xcb\xa0\x2d\xa6\xbf\x92\xd7\xdf\x37\x90\x8b\xe9\x9f\xec\xfd\x6f\xb2\xfb\x2b\x79\xfe\xe5\x9e\xd8\x15\xd3\xbf\x23\x28\x3c\xf7\x5c\x04\xe7\x95\xe3\xba\x8e\x6c\xde\x7d\x1d\x13\x47\xf6\xba\x33\xe0\x3d\xf1\x72\xa0\x03\x9c\x00\x5b\xa2\xfa\x23\xe6\xb5\x9e\xe4\x1e\x22\xde\x59\xe2\x2d\x1f\x4b\xa7\xc9\x5d\x44\x72\xaf\x11\xaf\x95\x78\xe3\xde\x87\x91\x91\x0c\x46\xee\x6f\x83\xc4\x6b\x22\xfd\xbe\x9e\xc7\xd9\x77\x9d\xc5\xc6\xa9\x01\x7f\x8d\xd3\xef\xa9\xff\x18\xe9\x5f\x4d\x3c\xbb\x5f\xbe\x95\xf3\xe7\xa1\xbf\x85\xf4\xb3\xef\x84\xdd\xc4\xab\xf3\xd0\x5f\x47\x72\x7b\x88\xb7\x8f\x78\x5b\x3d\xf4\xcf\x04\xa7\x82\xc2\x1e\x25\x7b\xc4\x55\x70\x98\x78\xf5\xba\x56\x3a\xd4\xbb\x01\x9a\xcb\xe5\xfe\x5e\x90\x0c\x4b\xc9\x57\x0b\x89\x30\x9f\x4a\x84\xaf\xab\xa6\xa6\x06\x9c\xa3\x0c\x27\xb3\x61\x98\x28\xd2\x17\x96\xf3\xc2\xec\xc0\x81\xff\xf4\x09\x43\x8d\xa5\xfc\x0b\x00\x00\xff\xff\x94\x04\x9d\x91\xbe\x10\x00\x00")

func _staticFavIcoBytes() ([]byte, error) {
	return bindataRead(
		__staticFavIco,
		"_static/fav.ico",
	)
}

func _staticFavIco() (*asset, error) {
	bytes, err := _staticFavIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/fav.ico", size: 4286, mode: os.FileMode(420), modTime: time.Unix(1440120526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticHistoryHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x6d\x6f\xdb\x36\x10\xfe\xde\x5f\x71\x21\xfa\xc1\x46\x22\xdb\x09\xd6\x6d\x88\x25\x17\x49\x9a\x22\x01\xb6\x75\xd8\x52\x6c\x43\x10\x14\xb4\x78\xb6\x88\x4a\xa4\x46\x9e\x5d\x1b\xa9\xfe\xfb\x8e\x7a\xb1\xe5\x24\x2d\x30\x01\xad\x75\x7c\x78\xcf\xbd\x9f\x12\x1f\xbd\xfb\x70\x75\xf7\xcf\xef\xd7\x90\x51\x91\xcf\x5e\xc5\xe1\x07\x72\x69\x96\x89\x40\x23\xc2\x01\x4a\x35\x7b\x05\x10\x17\x48\x12\xd2\x4c\x3a\x8f\x94\x88\x8f\x77\xef\xa3\x9f\xc5\x1e\xc8\x88\xca\x08\xff\x5d\xe9\x75\x22\xfe\x8e\x3e\x5e\x44\x57\xb6\x28\x25\xe9\x79\x8e\x02\x52\x6b\x08\x0d\x6b\xdd\x5e\x27\xa8\x96\x78\x92\x66\xce\x16\x98\x9c\x36\x04\xa4\x29\xc7\xd9\xe3\xe3\xe8\x2e\xbc\x54\x55\x3c\x6e\x4e\x02\x96\x6b\xf3\x19\x1c\xe6\x89\xf0\xb4\xcd\xd1\x67\x88\x24\x20\x73\xb8\x48\x04\x6b\xdc\x58\x4f\x55\x35\xa6\x0c\x0b\xf4\xe3\x14\xdd\x2a\x47\x69\x46\x85\x36\xa3\xd4\x7b\x01\xe3\xff\x4f\x32\xb7\x96\x3c\x39\x59\x46\x0e\x7d\x69\x8d\xd7\x6b\x7c\x4a\x58\xd3\x00\x6d\x4b\x4c\x04\xe1\x86\xc6\x35\x56\xa0\xd2\x92\x6d\xa4\x0e\xeb\xdc\x41\xfb\xcc\xad\xda\xc2\xe3\x4e\xec\x9e\x42\xba\xa5\x36\xe7\xf0\xd3\xa4\xdc\x80\x5c\x91\x9d\xee\xae\x54\xc1\xc8\xb8\xb6\xc2\x25\x18\x37\x35\x88\x03\x4f\x6d\x5e\xe9\x35\xa4\xb9\xf4\x3e\x11\x46\xae\xe7\xd2\x41\xf3\x13\x29\x5c\xc8\x55\x4e\x9d\xb8\xd0\x1b\x54\x11\xd9\xb2\x75\xa6\xaf\x18\x6a\x22\xb5\x41\xb7\x73\xf4\x39\x6d\x14\x0c\xf7\x6e\xec\x9f\xfa\xae\x56\x89\x08\x37\x38\xbd\xa1\xc8\x07\x9a\x73\x27\x8d\x12\x33\xb8\xd1\x9e\xac\xdb\x82\x5d\xc0\xbe\xc0\x1c\x1b\xeb\x1f\xb2\x3e\x39\xda\x89\xfb\x97\xce\x64\xce\x94\xe2\x5b\x61\xc4\x99\x6b\x6a\x14\xfa\x4a\x72\xf7\x75\x17\x1b\xa1\xfe\x3f\xe2\xf2\xea\x12\x55\x2b\x65\x76\xdd\xcf\x02\x75\x1d\xdf\xc9\xae\xef\x28\xc3\xb3\x3f\x70\xad\xbd\xb6\x86\xfb\x34\x7b\x8a\x71\xdb\x17\xdc\xea\x2f\x41\x77\x9a\xdb\x8b\x64\x51\xbe\x04\x5e\xac\x28\xb3\xee\x10\x61\x69\x67\x3b\x20\x3d\xbf\x62\xea\x9a\xa1\x79\x1e\x1f\x81\x13\xbe\x44\x78\xad\x8d\xc2\xcd\x09\xbc\xc6\x1c\x83\x23\x70\x9e\xc0\x28\x38\xa5\xe9\xda\x70\xd8\xe8\xa1\xaa\xbe\x1d\x9c\x9a\xc5\xda\x94\x2b\x6a\x7b\x3b\xcd\x30\xfd\x3c\xb7\x1b\x01\x9c\xa2\x30\x2b\x1d\xed\xe8\x4f\xf6\x96\x6e\xa4\xcf\xaa\x6a\x57\x0b\xbe\xf3\xa9\xd6\x08\x63\x12\xcb\x76\xc0\xde\xf2\x71\xc8\x56\xd2\xd3\xbe\x55\xac\xc6\x13\x0f\xcf\xf9\x20\xcc\xbf\x9c\x71\xbc\xea\x99\x6b\xbe\x94\x66\xd6\xa3\xf9\x15\xbd\x97\xcb\x7a\x63\xd4\xd0\x4b\x4a\xbd\xeb\xbb\x02\x8c\xde\x5b\x57\x48\x02\x71\x36\x99\xfc\x18\x4d\x4e\xa3\xc9\x19\x9c\xbe\x39\x9f\xfc\x70\x3e\x79\x23\xea\xfd\xf3\x3d\x9a\xa6\x54\x4f\xaf\xf5\x8b\x55\xd7\x03\x8d\xda\xa7\x9a\xd1\x7d\xc1\x58\x08\x8d\xd7\x0a\xe5\x2c\x9e\xaf\x88\xac\xe9\xd2\x38\x27\x03\xfc\x2f\x2a\x9d\xe6\x15\xb1\x05\xa5\x7d\xb8\xae\x44\xdd\xfd\x4a\x2f\x16\x9f\x18\x16\xa0\x24\x49\x1e\xee\xe5\x32\xe7\x4a\x35\x14\x62\xf6\x8e\xe1\x78\xdc\x48\x9c\x8f\xb2\x35\xc2\x3b\x49\x97\xd4\xf9\xa7\x6c\xba\xaa\x43\x59\x22\x5d\x37\x51\x5d\x6e\x6f\xd5\x60\x4f\x3e\x1c\x49\xa5\xae\xd7\x0c\xfc\xc2\xd3\x86\x3c\x5f\x03\x91\xe6\x9a\x4b\x7b\xb2\x58\x99\x94\xb8\x9e\x03\x1c\xee\x77\xda\x9a\x77\x50\x5d\xfa\x4b\xbb\xf1\x90\xbc\x64\xc1\x5f\x6e\xaf\x42\x80\xbf\xc9\x02\x07\xbd\x5e\x19\x4e\x0f\x58\x72\x34\x4b\xca\x98\x62\x47\x37\x6a\x8e\xa6\xcf\x8d\xa1\xba\xb2\x2b\xee\xf1\x04\x26\x87\xa8\xe7\x5a\xa5\x14\x1c\xb9\x7f\xd8\x23\x0b\xeb\x06\x01\xd5\x41\x01\xa6\x1a\xe2\xd6\xda\x14\xf4\xf1\xf1\xb0\xbf\xa1\xf5\x62\xb0\xb3\x7f\xaf\x1f\x42\x18\x17\xc4\xe3\xc3\x89\x65\xe7\x5b\xe3\x62\x08\x5f\xbf\xc2\xc1\xbd\x16\x19\x1e\x6e\xfb\xd6\x9d\x51\xb9\xf2\xd9\xf7\x78\xc3\x1e\x1a\xf6\xf2\xd1\x7c\x08\x9e\xbe\xb1\x6f\x1d\x61\x9b\xac\xa3\x04\xce\x0e\x4c\xca\x1c\x1d\x0d\x44\xc9\x1f\x43\x8f\xad\x79\xb8\xfb\xeb\x03\xb4\xb3\xe8\x8f\xfa\x69\xaf\x30\xf7\xd8\x57\x1f\x8f\xc1\xe6\x0a\xac\x41\x58\x68\xe7\xa9\x07\x7d\xe1\xfd\x62\xbf\x8c\x6c\x89\x66\x20\xde\x86\x7e\x49\x04\x1c\x77\x11\xde\x9f\x3e\xb0\x20\x4e\xfa\x47\x93\x87\xe1\xf4\x59\x14\x55\x7b\xc6\x83\xdb\xeb\xcc\xdd\xf2\x6e\x97\x3e\x37\x72\x3d\x34\xfc\x05\x0c\x7f\x9d\xfc\x17\x00\x00\xff\xff\x20\x4f\xf1\x85\xad\x08\x00\x00")

func _staticHistoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticHistoryHtml,
		"_static/history.html",
	)
}

func _staticHistoryHtml() (*asset, error) {
	bytes, err := _staticHistoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/history.html", size: 2221, mode: os.FileMode(420), modTime: time.Unix(1440121035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticListdirHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\xdb\x38\x10\xbd\xe7\x57\xcc\x12\x39\x46\x96\x13\x6c\x76\x0b\x57\x12\xd0\xe6\x03\x0d\xd0\x2f\xb4\x0e\xd0\x1e\x69\x71\x6c\x11\x95\x48\x95\x1c\x1b\x76\x0d\xfd\xf7\x0e\x25\xcb\x96\xdd\xe4\x90\xf2\x60\x93\x7c\x9c\xf7\x38\xf3\x86\x4a\xfe\xb9\xfd\x74\x33\xfd\xfe\xf9\x0e\x0a\xaa\xca\xec\x2c\x09\x7f\x50\x4a\xb3\x48\x05\x1a\x11\x36\x50\xaa\xec\x0c\x20\xa9\x90\x24\xe4\x85\x74\x1e\x29\x15\x8f\xd3\xfb\xe8\x95\x38\x00\x05\x51\x1d\xe1\xcf\xa5\x5e\xa5\xe2\x5b\xf4\xf8\x26\xba\xb1\x55\x2d\x49\xcf\x4a\x14\x90\x5b\x43\x68\x38\xea\xe1\x2e\x45\xb5\xc0\x8b\xbc\x70\xb6\xc2\xf4\xb2\x23\x20\x4d\x25\x66\xdb\xed\x68\x1a\x26\x4d\x93\xc4\xdd\x4e\xc0\x4a\x6d\x7e\x80\xc3\x32\x15\x9e\x36\x25\xfa\x02\x91\x04\x14\x0e\xe7\xa9\xe0\x88\x77\xd6\x53\xd3\xc4\x54\x60\x85\x3e\xce\xd1\x2d\x4b\x94\x66\x54\x69\x33\xca\xbd\x17\x10\xbf\x9c\x64\x66\x2d\x79\x72\xb2\x8e\x1c\xfa\xda\x1a\xaf\x57\x78\x4a\xd8\xd2\x00\x6d\x6a\x4c\x05\xe1\x9a\xe2\x16\xab\x50\x69\xc9\x1a\xb9\xc3\xb6\x76\xc0\x63\x66\xd5\x06\xb6\xed\x34\x8c\x4a\xba\x85\x36\x13\xf8\x7f\x5c\xaf\x41\x2e\xc9\xbe\x6e\xa1\x26\x90\xc6\x2d\x2b\x97\x3c\xee\x6a\x9e\x84\xd8\x56\x4e\xe9\x15\xe4\xa5\xf4\x3e\x15\x46\xae\x66\xd2\x41\xf7\x17\x29\x9c\xcb\x65\x49\xfd\x72\xae\xd7\xa8\x22\xb2\xf5\x4e\x7c\x18\x18\x3c\x90\xda\xa0\xdb\x61\xfd\xf8\x93\x3c\x0a\xf2\x47\xe7\xda\x33\x5a\xa5\x22\x20\x5c\xcc\x60\xe9\x51\xc4\xcc\x49\xa3\x44\x06\xb7\xda\x61\x4e\xd6\x6d\xe0\xbd\xf6\xa4\xcd\x02\xec\x1c\x0e\xc6\x72\x8e\xcc\x74\xa2\x7f\xd8\xda\x4f\x0f\x93\x5e\xb8\x64\x3a\xf1\x5c\x2a\x49\xe1\x3a\x5f\x42\x2f\x49\xee\xb8\xfe\x60\xb7\x68\x7f\x23\xb6\x54\xd7\xa8\x76\xab\xc2\xae\x06\x19\x26\xd4\x77\x79\xbf\x76\xc3\x4b\x32\x9c\xdd\xeb\x12\x8d\xac\x90\x7b\xb3\x38\xc5\xbe\xea\x5f\x4f\xee\xdf\x4a\x42\xd2\xa7\x31\xbc\xda\xb3\x07\x64\xa0\x9c\x50\x6f\x79\x37\xb6\x5b\xe0\xc2\x2e\x10\xce\xb5\x51\xb8\xbe\x80\x73\x2c\xb9\x47\x0d\xc1\x24\x85\x11\x17\xfb\xce\x70\x56\xe8\xa1\x69\x9e\xbf\xbb\xca\x12\xb9\xef\xf5\x9e\x60\xf4\xe8\x4a\x7e\x9e\x45\xd3\x88\x6c\xb0\xfb\x91\x33\x64\x9b\x58\x57\xcf\xf7\x62\xa3\x07\xcf\x52\x10\xec\xf3\xb5\x34\x7d\x71\xd1\x28\xcf\xb3\x42\x64\x31\xb7\x2e\x03\x59\x88\xe3\xdd\xf6\x64\x2c\x33\x4e\x4e\xbd\xec\x2a\xd0\xbe\xfb\x23\x30\xd4\xb6\x69\xde\x1e\xdd\xf2\x0b\x97\x2c\xb8\x18\x30\x20\xb7\x6c\x3f\x19\x7f\xa3\x37\x24\xfd\x60\xd5\x94\xbd\x1a\xdd\x5b\x57\x49\x02\x71\x35\x1e\xff\x17\x8d\x2f\xa3\xf1\x15\x5c\x5e\x4f\xc6\xff\x4e\xc6\xd7\xe2\x29\x9d\xa1\x9d\x70\xa8\xc0\xc1\xe0\x83\xa5\xbc\x08\xd7\x3e\x69\xda\x5d\xb3\x27\x71\x77\x90\x5f\x7f\xf8\x12\xff\x0e\x00\x00\xff\xff\x2e\xea\x9b\x24\x99\x05\x00\x00")

func _staticListdirHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticListdirHtml,
		"_static/listdir.html",
	)
}

func _staticListdirHtml() (*asset, error) {
	bytes, err := _staticListdirHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/listdir.html", size: 1433, mode: os.FileMode(420), modTime: time.Unix(1440121222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x90\x31\x4f\x04\x21\x10\x85\x7b\x7f\x05\xd2\xbb\xdb\x1a\xe5\xb6\x39\x4d\xae\x52\x8b\x6b\xac\x0c\x2e\xa3\x60\x60\x20\xcc\x6c\x74\x73\xe1\xbf\x0b\xcb\x1e\x0d\x33\xdf\x7b\x99\x79\x19\x75\xfb\xf4\x7a\x3c\xbf\xbf\x3d\x0b\xcb\xc1\x4f\x37\xaa\x7f\xa2\x3e\xc5\x8e\x3d\x4c\x97\xcb\x70\x6e\x45\x29\x6a\xec\xa4\xab\x01\x58\x8b\xd9\xea\x4c\xc0\x07\xb9\xf0\xd7\xdd\xbd\xdc\xa5\xbf\x90\x04\x18\x57\x31\xe7\x05\xa4\xb0\x8e\x38\xe6\xf5\xda\xb2\x85\x00\x07\xd9\x06\xb7\xaa\x94\x8a\xe2\xdc\x41\x9c\x5b\x6b\x41\x1b\x87\xdf\x1f\xb8\x84\x4f\xc8\x9b\x72\xea\xe8\x65\x23\xcd\x43\xbc\xfa\x3a\xc5\x38\x4a\x5e\xaf\x0f\x18\x11\x1e\x65\x4b\x7b\x8c\xc8\x80\xdc\xf2\xd6\x20\x7b\x24\x9a\xb3\x4b\x2c\x28\xf7\x3d\xa7\x48\xd5\x30\x12\x67\x9d\x4c\xfc\xc5\x21\x38\x1c\x7e\x48\x4e\x6a\xec\xce\x7a\x89\x71\x3b\xc5\x7f\x00\x00\x00\xff\xff\x29\x1e\x61\x85\x21\x01\x00\x00")

func _staticViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticViewHtml,
		"_static/view.html",
	)
}

func _staticViewHtml() (*asset, error) {
	bytes, err := _staticViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/view.html", size: 289, mode: os.FileMode(420), modTime: time.Unix(1440121516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_static/diff.html":    _staticDiffHtml,
	"_static/edit.html":    _staticEditHtml,
	"_static/fav.ico":      _staticFavIco,
	"_static/history.html": _staticHistoryHtml,
	"_static/listdir.html": _staticListdirHtml,
	"_static/view.html":    _staticViewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_static": &bintree{nil, map[string]*bintree{
		"diff.html":    &bintree{_staticDiffHtml, map[string]*bintree{}},
		"edit.html":    &bintree{_staticEditHtml, map[string]*bintree{}},
		"fav.ico":      &bintree{_staticFavIco, map[string]*bintree{}},
		"history.html": &bintree{_staticHistoryHtml, map[string]*bintree{}},
		"listdir.html": &bintree{_staticListdirHtml, map[string]*bintree{}},
		"view.html":    &bintree{_staticViewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
