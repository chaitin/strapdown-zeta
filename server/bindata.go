// Code generated by go-bindata.
// sources:
// _static/diff.html
// _static/edit.html
// _static/fav.ico
// _static/history.html
// _static/listdir.html
// _static/view.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __staticDiffHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x3d\x6f\xdc\x30\x0c\xdd\xfb\x2b\x08\x75\x4b\xeb\x68\x6a\x11\x5c\xec\x5b\x8a\x7e\xa1\x43\x87\x16\xe8\x2c\x5b\x74\x4c\x9c\x2d\x19\x14\xef\xe2\xcb\xc1\xff\xbd\x92\xee\x23\x4e\x90\x74\xaa\x16\x53\x7c\x7a\x8f\xd2\x33\x59\x76\x32\xf4\xeb\x37\x00\x65\x87\xc6\xe6\x40\x48\x7a\x5c\x1f\x0e\xd7\xbf\x53\x30\xcf\xa5\x3e\x66\x12\x36\xa0\x18\x68\x3a\xc3\x01\xa5\x52\x5b\x69\x8b\x1b\x95\x81\x9e\xdc\x06\x18\xfb\x4a\x05\xd9\xf7\x18\x3a\x44\x51\xd0\x31\xb6\x95\xea\x44\xc6\x95\xd6\x51\xf1\x9b\x0f\x32\xcf\x3a\x08\x9b\xd1\xfa\x7b\xa7\xa5\xc3\x01\x83\x6e\x90\xb7\x3d\x1a\x77\x3d\x90\xbb\x6e\x42\x50\xa0\xff\x83\x6a\xed\xbd\xe4\x64\xc1\x18\x46\xef\x02\xed\xf0\x79\x85\xac\x0b\xb2\x1f\xb1\x52\x82\x93\xe8\x8c\x0d\x68\xc9\xc4\xa2\x0d\x23\xba\xfc\x40\x80\xb7\x96\xda\x16\x0e\x39\x4e\x6b\x30\x7c\x47\x6e\x05\x1f\x3e\x8e\x13\x98\xad\xf8\xdb\x0b\x54\xdc\x63\xbd\x21\x29\x6a\x3f\x15\x81\x1e\xc8\xdd\xad\xa0\xf6\x6c\x91\x53\xea\x16\xf4\x15\xfc\x32\xad\x61\x7a\x0f\x3e\xde\x95\xe1\x0f\xd6\x3f\x48\xe0\x4a\x3f\x4a\x0c\xfe\xe1\x55\x7e\x5c\x51\xe2\x0b\x45\x1f\xfc\x74\xd6\xf8\x8a\xcd\xc6\x2f\x25\xfe\xc1\x86\x93\xc4\xcf\x11\xd9\xe8\xef\x9f\xe1\xe6\xdd\x99\x39\x27\x57\x74\xb6\x25\x1b\xa4\x2f\x7d\x51\x7b\xbb\x3f\x5a\x51\x5a\xda\x41\xd3\x9b\x10\x2a\xe5\xcc\xae\x36\x0c\xc7\x4f\x61\xb1\x35\xdb\x5e\xce\xdb\x96\x26\xb4\x85\xf8\xf1\xe4\xe1\x53\x6a\xe3\x9d\x18\x72\xc8\x17\xf4\x25\xe9\x22\x5d\xe0\xc9\x99\xd3\x29\xb2\xb1\x09\x22\x16\x9b\x04\xd5\x33\x4e\xcd\xc6\x59\xb5\x86\xc7\x2e\x8e\x2f\x89\xa4\x45\xa1\xe5\x76\xb1\x59\x86\xe7\x2a\xe9\xcf\xab\xd7\x6e\x9d\x4e\xad\xcb\x91\xf3\xc8\x7c\x8a\x20\x3a\x49\x43\x93\x32\x2f\xe9\x96\xfa\x68\x64\x74\x36\x8d\xde\xdf\x00\x00\x00\xff\xff\x56\x06\xc8\x1b\x81\x03\x00\x00")

func _staticDiffHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticDiffHtml,
		"_static/diff.html",
	)
}

func _staticDiffHtml() (*asset, error) {
	bytes, err := _staticDiffHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/diff.html", size: 897, mode: os.FileMode(420), modTime: time.Unix(1439972552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticEditHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xe0\x18\x0c\xd8\x80\xca\x6a\x80\xb5\x2b\x5c\xc9\xdb\x90\x75\x58\x9f\x1a\xa0\x69\xb7\x3d\x52\xe2\xd9\x62\x43\x91\x1a\x79\x72\x9c\x06\xfe\xee\x3b\x92\x92\x2d\x3b\x76\x86\x6d\x0f\x13\x90\x98\xba\xe3\xfd\xfb\xdd\x1f\x5d\xf1\xd5\xcf\xef\xaf\x6e\xfe\xb8\x7e\xcb\x1a\x6c\xf5\xe2\x59\x11\x7e\x98\x16\x66\x55\x72\x30\x3c\x10\x40\xc8\xc5\x33\xc6\x8a\x16\x50\xb0\xba\x11\xce\x03\x96\xfc\xe3\xcd\x2f\xd9\x6b\xbe\x67\x34\x88\x5d\x06\x7f\xf6\x6a\x5d\xf2\xdf\xb3\x8f\x3f\x65\x57\xb6\xed\x04\xaa\x4a\x03\x67\xb5\x35\x08\x86\xa4\xde\xbd\x2d\x41\xae\xe0\x79\xdd\x38\xdb\x42\x79\x99\x14\xa0\x42\x0d\x8b\x87\x87\xd9\x4d\x38\x6c\xb7\x45\x9e\x28\x81\xa7\x95\xb9\x65\x0e\x74\xc9\x3d\xde\x6b\xf0\x0d\x00\x72\xd6\x38\x58\x96\x3c\xd8\x9c\xe7\x39\x09\xfe\x6a\x3d\x6e\xb7\xb9\x47\x27\x3a\x69\xef\x4c\x8e\x0d\xb4\xe0\xf3\x1a\x5c\xaf\x41\x98\x59\xab\xcc\xac\xf6\x9e\xb3\xfc\xbf\x68\xdd\x9d\x8e\xf5\x45\x2d\x0c\xef\x3b\x28\x39\xc2\x06\xf3\xc8\x6b\x41\x2a\x41\x26\x6a\x07\x11\x4b\x46\x4f\xc0\xf7\x39\xab\xac\xbc\x67\x0f\x91\x40\x24\x50\xab\x06\xe7\xec\xf2\xc5\x8b\xaf\xdf\x0c\xb4\x56\xb8\x95\x32\x73\xf6\x62\x24\x74\x42\x4a\x65\x56\x3b\xca\x36\xfe\x3f\xd0\xb3\xbf\xd2\x6d\x46\xb1\x25\x21\x9f\x79\xf5\x05\x48\xfd\xcb\x3d\x99\xe2\x87\xec\xb1\xdd\xa4\x74\xd3\x76\xcf\x59\x88\x42\x38\x10\x3b\xed\x52\xf9\x4e\x8b\xfb\x39\xab\xb4\xad\x6f\xa7\xf7\xc3\x33\x33\x62\x5d\x09\xf7\xb0\x23\x84\xe7\x4b\xa6\x8c\x84\x4d\xb0\xf0\x66\xc7\x48\x32\x17\x04\x0d\x5a\xb7\xd3\xfe\x38\x5e\xeb\x15\x2a\x4b\x24\x51\x79\xab\x7b\x84\x91\x83\xb6\x9b\xb3\x97\x97\xfb\x60\x2a\x8b\x68\xdb\x89\xac\x86\x25\x4e\x5e\x5d\x0a\xf3\x00\xb8\x8b\xce\xc1\x5a\xc1\x5d\x86\x76\xb5\xa2\xd4\x1d\xfa\x91\xb9\x11\x99\xd1\x4a\x92\x9a\x39\xa0\x80\x5c\x46\xc8\xac\x00\x8f\x64\xa2\x5f\xaf\x8e\x24\x7e\x8c\x35\xc0\xbe\x69\xc5\x26\xbb\x53\x12\x9b\x39\xfb\xfe\xd5\xeb\x6e\xf3\xed\x28\x3c\x00\x37\xfe\x66\x15\x9a\x3d\x88\xa7\x30\x0f\xcf\xa0\x69\x5a\x30\xdb\xa9\x9b\xe7\x75\x1e\xc5\xf7\xdd\xd4\xdb\x22\x8f\x65\x4c\x3d\x9f\xa7\xa6\x2f\x42\x79\xa5\xb2\x2d\xa4\x5a\xb3\x5a\x0b\xef\x4b\x3e\x68\x1f\x94\x4b\x58\x8a\x5e\xe3\xf8\xba\x54\x1b\x90\x01\x8b\xa1\xde\x8f\x85\xc3\x28\x10\x54\x7d\x74\x53\xf7\x4a\x4e\x6e\x9d\x36\x93\x05\x57\xc0\x1d\xdd\x8b\x77\xab\x9e\xf2\x6e\x86\xae\x4b\x2f\xfc\x48\x78\xc8\x6e\x6d\xb5\x16\x9d\x07\xc9\x99\x14\x28\x06\x72\x70\x26\xd1\x47\x72\x4c\x6b\xc9\x2f\x5a\xf2\x30\x23\x15\x9c\x09\xa7\x44\x06\x9b\x4e\x18\x59\xf2\xa5\xd0\x74\xf7\xb1\x27\xd1\x1b\x4f\x77\x46\xeb\x8a\xa2\xcc\xc8\x3e\x5f\x10\xa6\x44\xff\xbf\x44\x8a\x3c\xc1\x72\x82\xf3\x18\xe8\xca\x51\x90\x7c\xf1\x9b\xba\x55\x45\x4e\xec\xa3\xcc\x9c\x20\x1d\xa4\x35\x21\x39\x96\xc1\x0e\xd9\x13\xa6\x7b\x3d\xb1\x3c\x0a\x4c\x8e\xb1\x38\xcf\xc1\xac\xd5\x69\x46\x64\x8a\x61\x84\x5f\x70\xa6\x28\x5f\x87\x3d\xce\x17\xef\x8c\x47\x61\x90\x5d\x27\x7a\x91\x8b\x33\x46\xf2\x73\x56\x9e\x36\xbf\xb4\xae\xa5\xa1\x8f\x8d\x25\xe3\xd7\xef\x3f\xdc\x50\xfd\xd4\x61\x88\x95\xfc\x87\x30\xef\x38\x45\xd8\x86\x5a\xa5\xb6\xe2\x0c\x4c\x9d\x4a\xb7\xa5\xf6\x51\x9d\x70\x98\x07\x05\x59\x28\x45\xce\xce\x9b\x89\xa6\x94\xe9\x7a\x8c\x41\x7a\xb1\xfe\x24\x74\x4f\x35\x9c\xb4\x35\x4a\x4a\xfa\xda\x1c\x98\x5a\x87\x0b\x25\x1f\xbe\x56\x4f\xa8\x1d\x5a\x6a\x48\x0f\xcd\x0d\x46\x7f\xc7\x2d\x4e\xa4\xd1\x98\xef\xab\x96\xe2\x5a\x7c\x10\x6b\x38\x5f\x6c\x7b\x5c\x43\x80\xff\x04\xf3\x22\xef\xf5\x93\x75\x38\x79\xdd\x1d\xa7\x75\x79\x30\xb0\x39\x8b\x03\xae\xe4\xe3\x5c\x35\xd6\x40\xe8\x9e\x51\x90\xbe\x7c\x6c\x0d\xce\xc7\x94\xd1\x02\xf0\x29\x9d\xb7\xdb\x54\x4f\xe9\x9b\xc5\xc3\xa6\x72\x95\x36\x9a\xb0\xab\x90\x50\xda\x01\x6a\xa7\x3a\x64\xde\xd5\x27\x76\x08\x51\x43\xf8\x9b\x7d\xf6\x7c\xba\x26\x7c\x16\x6b\x91\xe4\xf8\x7e\xb5\xea\x71\x19\x56\x2b\x6a\xea\xc8\xf9\x7b\xe5\xfb\x05\x25\x78\x18\x77\x93\x7f\x65\x87\x32\x18\x07\x3e\xcd\xff\xb0\x0c\xfe\x15\x00\x00\xff\xff\x50\x6e\xe1\x6f\x1c\x0a\x00\x00")

func _staticEditHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticEditHtml,
		"_static/edit.html",
	)
}

func _staticEditHtml() (*asset, error) {
	bytes, err := _staticEditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/edit.html", size: 2588, mode: os.FileMode(420), modTime: time.Unix(1439972413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticFavIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x97\x4b\x48\x54\x51\x1c\xc6\x4f\x4d\x35\x59\xe0\x0c\x14\x2d\x02\x6b\x68\x11\xb5\xb2\xc0\x95\x20\x0a\xd1\x2e\x8a\x8c\x68\x21\x44\x0f\x28\x2a\x10\x82\xdc\xf5\x9a\x82\x56\x15\x44\xaf\x4d\xa4\x8b\x88\xd1\x88\x4c\x0b\x8a\x1e\x58\x10\x08\x11\x75\xdb\x15\x11\x4a\xef\x07\x25\xf4\x24\x26\x6f\xdf\x9f\xf9\x4f\x0c\x7f\xbf\xb9\x17\xf5\x8c\x5e\xf9\x31\x32\xe7\xe7\xf7\x1d\xef\x9c\x7b\xee\x1d\xe7\xa6\xe0\x27\x93\x91\xd7\x8c\xcb\xa5\x9d\x9b\xe7\x9c\x5b\x02\xf0\x96\x6b\x72\x85\xf7\xe5\x38\x88\xb1\x39\xb3\x0b\x44\x1d\x41\xb6\x76\x2f\xc8\x83\xe7\xe0\x05\xf8\x0e\x56\x12\xef\xba\x8e\x89\xf7\x11\x3c\x02\xa9\xe8\xf4\xf8\x03\x19\xdb\x41\x68\xd8\x5f\xa6\xdf\x7a\x0d\x1e\xfa\x1b\x48\x6e\x27\xf1\xda\x88\xb7\xc9\x43\x7f\x35\xf8\x62\x72\x9f\x10\x6f\x2d\xe9\x3f\x3d\xde\x7e\xcd\x7e\x6c\x72\x7f\x82\xb9\xc6\x59\xa8\xeb\xa4\xd4\xbb\xe9\xa9\xbf\x9d\xfc\x6f\xf5\xc6\x99\x06\x06\x8d\xf3\x0e\xcc\xf0\xd0\xbf\x87\xf4\x6f\x26\x5e\x17\xf1\x96\x8e\xb1\x73\x56\xf1\xfa\xc1\x6b\x33\xc9\x3d\xa9\x63\xb2\x3e\xd2\xfa\xfb\xd1\x72\xf3\x94\x2c\x25\xad\x7f\x53\x15\xd3\x7f\x4e\xd7\x9d\x7c\xd6\x9f\x48\xee\x1f\xbd\xce\x3f\x2b\x1f\xc0\x57\xe2\xfd\xd0\xb1\xa2\x37\x0c\x9e\x15\xe7\x1f\xd1\x7f\x89\x64\xf9\x62\x08\x5c\x88\xe9\xef\xac\x60\xbf\x9c\xcf\xf6\x98\x7e\xb6\x96\x26\xb2\xbf\x92\xe7\x5f\xee\x13\x23\xf6\x50\xd3\xbf\x02\x6c\x03\xbb\xc0\x3a\x70\x84\xe4\xf4\x83\x0d\x60\x67\x89\xd7\x4b\x3c\x59\xcb\xab\x34\xaf\x15\x6c\x04\x8d\x51\xfd\x64\x3e\xf3\xc1\x2f\x93\x7b\x97\x78\x6b\x48\xff\xee\xd1\x74\x45\xcc\x21\x30\xb9\x72\x3d\xa5\x8c\xb3\x8c\xf4\xf7\x7a\xea\x67\x6b\xa2\xd6\x38\xd3\xc1\x2b\xe3\x04\x9e\xfa\xd9\x3e\xdc\x42\xbc\x7b\xc6\x91\xfb\x52\xcd\x28\xbb\xe4\xb9\xe7\x0e\x78\x00\x6e\x83\x2b\xe0\x29\xe9\x7f\x09\xba\xd5\xb9\x05\x7a\xc0\x9b\x32\x6b\x55\x9e\x51\x1e\x82\xcb\xa0\x2d\xa6\xbf\x92\xd7\xdf\x37\x90\x8b\xe9\x9f\xec\xfd\x6f\xb2\xfb\x2b\x79\xfe\xe5\x9e\xd8\x15\xd3\xbf\x23\x28\x3c\xf7\x5c\x04\xe7\x95\xe3\xba\x8e\x6c\xde\x7d\x1d\x13\x47\xf6\xba\x33\xe0\x3d\xf1\x72\xa0\x03\x9c\x00\x5b\xa2\xfa\x23\xe6\xb5\x9e\xe4\x1e\x22\xde\x59\xe2\x2d\x1f\x4b\xa7\xc9\x5d\x44\x72\xaf\x11\xaf\x95\x78\xe3\xde\x87\x91\x91\x0c\x46\xee\x6f\x83\xc4\x6b\x22\xfd\xbe\x9e\xc7\xd9\x77\x9d\xc5\xc6\xa9\x01\x7f\x8d\xd3\xef\xa9\xff\x18\xe9\x5f\x4d\x3c\xbb\x5f\xbe\x95\xf3\xe7\xa1\xbf\x85\xf4\xb3\xef\x84\xdd\xc4\xab\xf3\xd0\x5f\x47\x72\x7b\x88\xb7\x8f\x78\x5b\x3d\xf4\xcf\x04\xa7\x82\xc2\x1e\x25\x7b\xc4\x55\x70\x98\x78\xf5\xba\x56\x3a\xd4\xbb\x01\x9a\xcb\xe5\xfe\x5e\x90\x0c\x4b\xc9\x57\x0b\x89\x30\x9f\x4a\x84\xaf\xab\xa6\xa6\x06\x9c\xa3\x0c\x27\xb3\x61\x98\x28\xd2\x17\x96\xf3\xc2\xec\xc0\x81\xff\xf4\x09\x43\x8d\xa5\xfc\x0b\x00\x00\xff\xff\x94\x04\x9d\x91\xbe\x10\x00\x00")

func _staticFavIcoBytes() ([]byte, error) {
	return bindataRead(
		__staticFavIco,
		"_static/fav.ico",
	)
}

func _staticFavIco() (*asset, error) {
	bytes, err := _staticFavIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/fav.ico", size: 4286, mode: os.FileMode(420), modTime: time.Unix(1439970711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticHistoryHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdd\x6f\xdb\x36\x10\x7f\xef\x5f\x71\x25\xfa\x60\xa3\x91\xe5\x14\xeb\x36\xc4\x92\x8b\x24\x4d\x91\x00\xdb\x3a\x6c\x29\xb6\x21\x08\x0a\x5a\x3c\x5b\x44\x25\x52\x13\x4f\x8e\x0d\x57\xff\xfb\x8e\xfa\xb0\xe5\x24\xed\xd3\x08\x24\xd2\xf1\x77\xdf\x5f\x72\xf4\xf2\xfd\xc7\xcb\xdb\x7f\x7e\xbf\x82\x94\xf2\x6c\xfe\x22\xf2\x0f\xc8\xa4\x59\xc5\x02\x8d\xf0\x17\x28\xd5\xfc\x05\x40\x94\x23\x49\x48\x52\x59\x3a\xa4\x58\x7c\xba\xfd\x10\xfc\x2c\x0e\x40\x4a\x54\x04\xf8\x6f\xa5\xd7\xb1\xf8\x3b\xf8\x74\x1e\x5c\xda\xbc\x90\xa4\x17\x19\x0a\x48\xac\x21\x34\x2c\x75\x73\x15\xa3\x5a\xe1\x49\x92\x96\x36\xc7\xf8\xb4\x55\x40\x9a\x32\x9c\xef\x76\x93\x5b\xff\x52\xd7\x51\xd8\xde\x78\x2c\xd3\xe6\x0b\x94\x98\xc5\xc2\xd1\x36\x43\x97\x22\x92\x80\xb4\xc4\x65\x2c\xbc\xcd\xb3\x30\x64\xc1\x6b\xeb\xa8\xae\x43\x47\xa5\x2c\x94\x7d\x30\x21\xa5\x98\xa3\x0b\x13\x2c\xab\x0c\xa5\x99\xe4\xda\x4c\x12\xe7\x04\x84\xff\x83\xd6\x85\xb5\xd4\x5c\x06\x25\xba\xc2\x1a\xa7\xd7\xf8\xd8\x42\xa3\x17\x68\x5b\x60\x2c\x08\x37\x14\x36\x58\x8e\x4a\x4b\x36\x9a\x94\xd8\x64\x17\xba\xb3\xb0\x6a\x0b\xbb\x3d\xd9\x9f\x5c\x96\x2b\x6d\xce\xe0\xa7\x69\xb1\x01\x59\x91\x9d\xed\x59\x6a\x6f\x24\x6c\xac\x70\x91\xc2\xb6\x4a\x91\xd7\xd3\x98\x57\x7a\x0d\x49\x26\x9d\x8b\x85\x91\xeb\x85\x2c\xa1\x7d\x04\x0a\x97\xb2\xca\xa8\x27\x97\x7a\x83\x2a\x20\x5b\x74\xce\x0c\x05\x7d\xd5\xa4\x36\x58\xee\x1d\x7d\xaa\x36\xf0\x86\x07\x1c\x87\xd3\xf0\x6a\xc5\xf9\x64\x0e\xce\xb7\x6f\x83\x23\xc9\x45\x29\x8d\x12\x73\xb8\xd6\x8e\x6c\xb9\x05\xbb\x84\x43\x0b\x70\x6c\x2c\x7f\xac\xf5\xd1\xd5\x9e\x3c\xbc\xf4\x26\x33\x56\x29\xbe\x15\x46\x94\x96\x6d\x8d\x7c\xe7\x49\xee\xcf\x9e\xb1\x25\x9a\xff\x01\x97\x57\x17\xa8\x3a\x2a\xb5\xeb\x61\x16\xa8\x9f\x89\x9e\x2e\x87\x8e\x32\x3c\xff\x03\xd7\xda\x69\x6b\xb8\x93\xd3\xc7\x18\x0f\x46\xce\xc3\xf0\x1c\x74\xab\xb9\xbd\x48\xe6\xc5\x73\xe0\x79\x45\xa9\x2d\x8f\x11\xa6\xf6\xb6\x3d\x32\xf0\x2b\xa2\xbe\x19\xda\xb3\xdb\x01\x27\x7c\x85\xf0\x4a\x1b\x85\x9b\x13\x78\x85\x19\x7a\x47\xe0\x2c\x86\x89\x77\x4a\xd3\x95\xe1\xb0\xd1\x41\x5d\x7f\x3b\x38\x35\x8f\xb4\x29\x2a\xea\x7a\x3b\x49\x31\xf9\xb2\xb0\x1b\x01\x9c\xa2\x58\xec\x76\xbd\xda\xc9\x9f\xec\x2d\x5d\x4b\x97\xd6\xf5\xbe\x16\xcc\xf3\xb9\x91\xf0\x63\x12\xc9\x6e\xe2\xde\xf1\xb5\xcf\x56\x3c\x90\xbe\x51\x2c\xc6\x3b\x01\x9e\xea\x03\xbf\x21\xe4\x9c\xe3\x55\x4f\x5c\x73\x85\x34\xf3\x81\x9a\x5f\xd1\x39\xb9\x6a\x76\x4a\x03\x3d\x27\x34\x60\xdf\x17\x60\xf2\xc1\x96\xb9\x24\x10\x6f\xa6\xd3\x1f\x83\xe9\x69\x30\x7d\x03\xa7\x6f\xcf\xa6\x3f\x9c\x4d\xdf\x8a\x66\x43\x7d\x4f\x4d\x5b\xaa\xc7\x6c\xc3\x62\x35\xf5\x40\xa3\x0e\xa9\x66\xf4\x50\x30\x26\x7c\xe3\x75\x44\x31\x8f\x16\x15\x91\x35\x7d\x1a\x17\x64\x80\xff\x82\xa2\xd4\xbc\x22\xb6\xa0\xb4\xf3\xec\x4a\x34\xdd\xaf\xf4\x72\xf9\x99\x61\x01\x4a\x92\xe4\xe1\x5e\xad\x32\xae\x54\xab\x42\xcc\xdf\x33\x1c\x85\x2d\xc5\xf9\x28\x3a\x23\xbc\x93\x74\x41\xbd\x7f\xca\x26\x55\x13\xca\x0a\xe9\xaa\x8d\xea\x62\x7b\xa3\x46\x07\xe5\xe3\x89\x54\xea\x6a\xcd\xc0\x2f\x3c\x6d\xc8\xf3\x35\x12\x49\xa6\xb9\xb4\x27\xcb\xca\x24\xc4\xf5\x1c\xe1\xf8\xb0\xd3\xd6\xbc\x83\x9a\xd2\x5f\xd8\x8d\x83\xf8\x39\x0b\xee\x62\x7b\xe9\x03\xfc\x4d\xe6\x38\x1a\xf4\xca\x78\x76\xa4\x25\x43\xb3\xa2\x94\x55\xec\xd5\x4d\xda\xab\xd9\x53\x63\xa8\x2e\x6d\xc5\x3d\x1e\xc3\xf4\x18\x75\x5c\xab\x84\xbc\x23\x77\xf7\x07\x64\x69\xcb\x91\x47\xb5\x17\x80\x99\x86\xa8\xb3\x36\x03\xfd\xfa\xf5\x78\xb8\xa1\xf5\x72\xb4\xb7\x7f\xa7\xef\x7d\x18\xe7\xc4\xe3\xc3\x89\x65\xe7\x3b\xe3\x62\x0c\x5f\xbf\xc2\x11\x5f\x87\x8c\x8f\xb7\x7d\xe7\xce\xa4\xa8\x5c\xfa\x3d\xbd\x7e\x0f\x8d\x07\xf9\x68\x3f\x04\x8f\xdf\xd8\xb7\x5e\x61\x97\xac\x97\x31\xbc\x39\x32\x29\x33\x2c\x69\x24\x0a\xfe\x3a\x3a\xec\xcc\xc3\xed\x5f\x1f\xa1\x9b\x45\xf7\x72\x98\xf6\x1a\x33\x87\x43\xf1\x30\x04\x9b\x29\xb0\x06\x61\xa9\x4b\x47\x03\xe8\x81\xf7\x8b\x7d\x98\xd8\x02\xcd\x48\xbc\xf3\xfd\x12\x0b\x78\xdd\x47\x78\x77\x7a\xcf\x84\x38\x19\x5e\x4d\xef\xc7\xb3\x27\x51\xd4\xdd\x1d\x0f\xee\xa0\x33\xf7\xcb\xbb\x5b\xfa\xdc\xc8\xcd\xd0\xf0\x17\xd0\xff\x7e\xf9\x2f\x00\x00\xff\xff\xcd\xfe\xef\x59\xcf\x08\x00\x00")

func _staticHistoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticHistoryHtml,
		"_static/history.html",
	)
}

func _staticHistoryHtml() (*asset, error) {
	bytes, err := _staticHistoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/history.html", size: 2255, mode: os.FileMode(420), modTime: time.Unix(1439972513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticListdirHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x6f\xdb\x3c\x0c\xbe\xf7\x57\xf0\x15\x7a\xac\xe3\xb4\x78\xbb\x0d\x99\x6d\x60\xeb\x07\x56\x60\x5f\xd8\x52\x60\x3b\x2a\x16\x13\x0b\xb3\x25\x4f\x62\xb2\x64\x81\xff\xfb\x28\x3b\x6e\x9c\xac\x3d\x6c\x98\x0e\x89\xc8\x47\xe4\x23\xf2\xa1\x95\xfc\x77\xfd\xe1\x6a\xfa\xf5\xe3\x0d\x14\x54\x95\xd9\x49\x12\xfe\xa0\x94\x66\x91\x0a\x34\x22\x38\x50\xaa\xec\x04\x20\xa9\x90\x24\xe4\x85\x74\x1e\x29\x15\xf7\xd3\xdb\xe8\x85\xd8\x03\x05\x51\x1d\xe1\xf7\xa5\x5e\xa5\xe2\x4b\x74\xff\x2a\xba\xb2\x55\x2d\x49\xcf\x4a\x14\x90\x5b\x43\x68\x38\xea\xee\x26\x45\xb5\xc0\xb3\xbc\x70\xb6\xc2\xf4\xbc\x4b\x40\x9a\x4a\xcc\xb6\xdb\xd1\x34\x6c\x9a\x26\x89\x3b\x4f\xc0\x4a\x6d\xbe\x81\xc3\x32\x15\x9e\x36\x25\xfa\x02\x91\x04\x14\x0e\xe7\xa9\x08\x9c\x93\x38\xe6\xc0\x37\xd6\x53\xd3\xc4\x9e\x9c\xac\x95\xfd\x61\x62\x2a\xb0\x42\x1f\xe7\xe8\x96\x25\x4a\x33\xaa\xb4\x19\xe5\xde\x0b\x88\xff\x41\xd6\x99\xb5\xd4\x3a\x23\x87\xbe\xb6\xc6\xeb\x15\x1e\x33\xb4\x79\x81\x36\x35\xa6\x82\x70\x4d\x71\x8b\x55\xa8\xb4\x64\xd2\xdc\x61\xdb\x5d\xe0\x35\xb3\x6a\x03\xdb\x76\x1b\x56\x25\xdd\x42\x9b\x09\x3c\x1f\xd7\x6b\x90\x4b\xb2\x2f\x5b\xa8\x09\x49\xe3\x36\x2b\x8b\x12\x77\xaa\x24\x21\xb6\xa5\x53\x7a\x05\x79\x29\xbd\x4f\x85\x91\xab\x99\x74\xd0\xfd\x45\x0a\xe7\x72\x59\x52\x6f\xce\xf5\x1a\x55\x44\xb6\xde\x91\x0f\x03\x83\x4a\x52\x1b\x74\x3b\xac\x5f\xbf\x27\x8f\x02\xfd\xc1\xb9\xf6\x8c\x56\xdc\x3d\x46\xb8\xbb\x41\xf4\x83\x88\x99\x93\x46\x89\x0c\xae\xb5\xc3\x9c\xac\xdb\xc0\x5b\xed\x49\x9b\x05\xd8\x39\xec\xa5\xe7\x1a\x39\xd3\x11\xff\xde\xf5\xb0\xdd\x6f\x7a\xe2\x92\xd3\x89\xa7\x4a\x49\x0a\xd7\xe9\x12\xa6\x4d\xf2\x4c\xf6\x07\x3b\xa3\xfd\x8d\x58\x52\x5d\xa3\xda\x59\x85\x5d\x0d\x2a\x4c\xa8\xff\x0e\x7a\xdb\x0d\x2f\xc9\x70\x76\xab\x4b\x34\xb2\x42\x9e\xde\xe2\x18\xfb\xac\x7f\x3e\xea\xbf\x96\x84\xa4\x8f\x63\xd8\x7a\xc8\x1e\x90\x01\x73\x42\xbd\xe4\xdd\xda\x6e\x81\x1b\xbb\x40\x38\xd5\x46\xe1\xfa\x0c\x4e\xb1\xe4\x19\x35\x04\x93\x14\x46\xdc\xec\x1b\xc3\x55\xa1\x87\xa6\x79\xfa\xee\x2a\x4b\xe4\x6e\xf8\xb7\xdb\x3e\xc1\xe8\xde\x95\xfc\x01\x17\x4d\x23\xb2\x81\xf7\x3d\x57\xc8\x32\x31\xaf\x9e\x3f\x90\x8d\xee\x3c\x53\x41\x90\xcf\xd7\xd2\xf4\xcd\x45\xa3\x3c\xef\x0a\x91\xc5\x3c\xba\x0c\x64\x21\x8e\xbd\xed\xc9\x58\x66\x5c\x9c\xfa\xb3\xab\x40\xfb\x32\x1c\x80\xa1\xb7\x4d\xf3\xfa\xe0\x96\x9f\xb8\x65\x41\xc5\x80\x01\xb9\x65\xfb\xa8\xfc\x0d\xdf\x30\xe9\x3b\xab\xa6\xac\xd5\xe8\xd6\xba\x4a\x12\x88\x8b\xf1\xf8\x59\x34\x3e\x8f\xc6\x17\x70\x7e\x39\x19\xff\x3f\x19\x5f\x8a\xc7\x78\x86\x72\xc2\xbe\x03\x7b\x81\xf7\x92\xb2\x11\xae\x7d\x34\xb4\xbb\x61\x4f\xe2\xee\x20\x7f\xfd\xe1\xad\xfe\x15\x00\x00\xff\xff\xcf\x87\x41\x8c\xbb\x05\x00\x00")

func _staticListdirHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticListdirHtml,
		"_static/listdir.html",
	)
}

func _staticListdirHtml() (*asset, error) {
	bytes, err := _staticListdirHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/listdir.html", size: 1467, mode: os.FileMode(420), modTime: time.Unix(1439972450, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __staticViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x90\xbd\x4e\xc4\x30\x10\x84\x7b\x9e\xc2\xb8\x27\x6e\xd1\xe1\x4b\x73\x20\x51\x01\xc5\x35\x54\xc8\x24\x0b\x36\x8a\x7f\xe4\x9d\x08\xa2\x53\xde\x1d\x3b\x0e\xc2\x8d\x77\xbf\x59\x8f\x47\xab\xaf\xef\x9f\x4f\xe7\xd7\x97\x07\x61\xe1\xa7\xfe\x4a\xb7\x4b\x94\xa3\xe1\x30\x51\x7f\xb9\x74\xe7\x5a\xac\xab\x56\x8d\x34\xd5\x13\x8c\x18\xac\xc9\x4c\x38\xca\x19\x1f\x37\xb7\x72\x97\x7e\x7c\x12\x34\xba\x82\x91\x67\x92\xc2\x3a\x46\xcc\xcb\x5f\x0b\x4b\x9e\x8e\xb2\x1a\xd7\x6a\x5d\x0b\x8a\x43\x03\x71\xa8\xad\x25\x33\xba\xf0\xf9\x16\x66\xff\x4e\x79\x53\x1e\x1b\x7a\xda\x48\x9d\x61\x2c\x53\x71\x19\x1d\xa7\xc9\x2c\x87\x10\x03\xdd\xc9\x9a\xf6\x14\x03\x28\xa0\xe6\x2d\x41\xf6\x48\x3c\x64\x97\x20\x38\x97\x7f\x2c\x90\x0e\x4a\x55\xd3\xc8\x65\x4e\x31\xb2\x49\x63\xfc\x0e\xff\x55\xe7\x5d\xe8\xbe\x58\xf6\x5a\xb5\xa7\x65\x35\x6a\xdb\xcd\x6f\x00\x00\x00\xff\xff\x3d\x4e\x7e\xb5\x32\x01\x00\x00")

func _staticViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		__staticViewHtml,
		"_static/view.html",
	)
}

func _staticViewHtml() (*asset, error) {
	bytes, err := _staticViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_static/view.html", size: 306, mode: os.FileMode(420), modTime: time.Unix(1439970077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_static/diff.html":    _staticDiffHtml,
	"_static/edit.html":    _staticEditHtml,
	"_static/fav.ico":      _staticFavIco,
	"_static/history.html": _staticHistoryHtml,
	"_static/listdir.html": _staticListdirHtml,
	"_static/view.html":    _staticViewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_static": &bintree{nil, map[string]*bintree{
		"diff.html":    &bintree{_staticDiffHtml, map[string]*bintree{}},
		"edit.html":    &bintree{_staticEditHtml, map[string]*bintree{}},
		"fav.ico":      &bintree{_staticFavIco, map[string]*bintree{}},
		"history.html": &bintree{_staticHistoryHtml, map[string]*bintree{}},
		"listdir.html": &bintree{_staticListdirHtml, map[string]*bintree{}},
		"view.html":    &bintree{_staticViewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
